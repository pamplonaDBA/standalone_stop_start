# Pamplona 2020
#  Playbook which gather operating system and logs it into logfile
---

- name : Obtaining oratab
  shell:
    cmd: cat /etc/oratab
  register: command_output

- name: registering oratab information 
  blockinfile:
    path: "{{logfile}}"
    marker: ""
    insertafter: EOF
    block: |
      #---------------------  Adding oratab  -----------------------
           command 
           {{command_output.cmd}}
           output 
           {{command_output.stdout}}
           error 
           {{command_output.stderr}}


- name: Obtaining asmdisk info 
  shell:
   cmd: ls -l /dev/oracleasm/disks
  register: command_output

- name: registering asmdisk info
  blockinfile:
    path: "{{logfile}}"
    insertafter: EOF
    marker: ""
    block: |
      #---------------------  ASMDISK info  -----------------------
           command 
           {{command_output.cmd}}
           output 
           {{command_output.stdout}}
           error 
           {{command_output.stderr}}


- name: Obtaining disks info
  shell:
    cmd: /sbin/fdisk -l 
  register: command_output
  become: yes
  become_user: "{{root_user}}"

- name: registering disks info
  blockinfile:
    path: "{{logfile}}"
    marker:  ""
    insertafter: EOF
    block: |
      #--------------------- Fdisk  info  -----------------------
           command 
           {{command_output.cmd}}
           output 
           {{command_output.stdout}}
           error 
           {{command_output.stderr}}



- name: Pmon runnng processes 
  shell:
    cmd: ps axf |grep -v grep |grep  pmon
  register: command_output
  

- name: registering pmon processes 
  blockinfile:
    path: "{{logfile}}"
    marker:  ""
    insertafter: EOF
    block: |
      #--------------------- Pmon processes info  -----------------------
           command 
           {{command_output.cmd}}
           output 
           {{command_output.stdout}}
           error 
           {{command_output.stderr}}



- name: listener  runnng processes 
  shell:
    cmd: ps axf |grep -v grep |grep lsnr
  register: command_output
  
- name: registering pmon processes 
  blockinfile:
    path: "{{logfile}}"
    marker:  ""
    insertafter: EOF
    block: |
           --------------------- lsnr processes info  -----------------------
           command
           {{command_output.cmd}}
           output 
           {{command_output.stdout}}
           error 
           {{command_output.stderr}}





